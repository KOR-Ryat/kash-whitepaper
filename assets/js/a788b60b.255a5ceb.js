"use strict";(self.webpackChunkkash_whitepaper=self.webpackChunkkash_whitepaper||[]).push([[2501],{8375:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"staking/tech/vault","title":"Reward Vault","description":"---","source":"@site/docs/12.staking/3.tech/5.vault.md","sourceDirName":"12.staking/3.tech","slug":"/staking/tech/vault","permalink":"/staking/tech/vault","draft":false,"unlisted":false,"editUrl":"https://github.com/kor-ryat/kash-whitepaper/tree/main/docs/12.staking/3.tech/5.vault.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Technical Details","permalink":"/staking/tech/intro"},"next":{"title":"Design Philosophy","permalink":"/staking/design"}}');var o=t(4848),a=t(8453);const s={sidebar_position:5},i="Reward Vault",d={},l=[{value:"Interface",id:"interface",level:3}];function c(e){const r={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"reward-vault",children:"Reward Vault"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"interface",children:"Interface"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title IRewardVault\r\n * @notice Interface for the Reward Vault contract, which manages KASH rewards for staking pools.\r\n */\r\ninterface IRewardVault {\r\n    // --- Structs ---\r\n\r\n    /**\r\n     * @notice Stores allocation information for a staking pool.\r\n     * @param totalAllocated The total KASH amount allocated to the pool.\r\n     * @param distributedAmount The total KASH amount already distributed to the pool.\r\n     * @param remainingAmount The KASH amount remaining to be distributed to the pool.\r\n     */\r\n    struct PoolAllocationData {\r\n        uint256 totalAllocated;\r\n        uint256 distributedAmount;\r\n        uint256 remainingAmount;\r\n    }\r\n\r\n    // --- Events ---\r\n\r\n    /**\r\n     * @notice Emitted when KASH rewards are deposited into the vault.\r\n     * @param depositor The address that deposited the rewards (e.g., Treasury).\r\n     * @param amount The amount of KASH tokens deposited.\r\n     */\r\n    event RewardsDepositedToVault(address indexed depositor, uint256 amount);\r\n\r\n    /**\r\n     * @notice Emitted when total rewards are allocated to a specific staking pool.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param totalAllocation The total KASH amount allocated to this pool.\r\n     */\r\n    event PoolRewardsAllocated(address indexed stakingPoolAddress, uint256 totalAllocation);\r\n\r\n    /**\r\n     * @notice Emitted when epoch rewards are distributed to a specific staking pool.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param epochRewardAmount The KASH amount distributed in this epoch.\r\n     * @param newTotalDistributedForPool The new total KASH amount distributed to this pool so far.\r\n     */\r\n    event EpochRewardDistributedToPool(\r\n        address indexed stakingPoolAddress,\r\n        uint256 epochRewardAmount,\r\n        uint256 newTotalDistributedForPool\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when the Keeper address is updated.\r\n     * @param oldKeeperAddress The previous Keeper address.\r\n     * @param newKeeperAddress The new Keeper address.\r\n     */\r\n    event KeeperAddressSet(address indexed oldKeeperAddress, address indexed newKeeperAddress);\r\n\r\n    /**\r\n     * @notice Emitted when a staking pool's supported status is changed.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param isSupported True if the pool is now supported, false otherwise.\r\n     */\r\n    event SupportedStakingPoolStatusChanged(address indexed stakingPoolAddress, bool isSupported);\r\n\r\n    /**\r\n     * @notice Emitted when reward parameters for a pool are set or updated.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param gValue The epoch reward growth rate (e.g., 0.01 * 1e18 for 1%).\r\n     * @param rewardBase The base reward for the first epoch.\r\n     * @param numEpochs The total number of epochs for the pool.\r\n     */\r\n    event PoolRewardParametersSet(\r\n        address indexed stakingPoolAddress,\r\n        uint256 gValue,\r\n        uint256 rewardBase,\r\n        uint256 numEpochs\r\n        // Potentially other parameters if needed\r\n    );\r\n\r\n    // --- Functions ---\r\n\r\n    /**\r\n     * @notice Deposits KASH rewards into the vault.\r\n     * @dev Should only be callable by Owner or Treasury.\r\n     * @param amount The amount of KASH tokens to deposit.\r\n     */\r\n    function depositRewardsToVault(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Allocates a total amount of KASH rewards for a specific staking pool (for internal accounting).\r\n     * @dev Should only be callable by Owner or Admin.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param totalAllocationForPool The total KASH amount allocated to this pool.\r\n     */\r\n    function allocateRewardsForPool(address stakingPoolAddress, uint256 totalAllocationForPool) external;\r\n\r\n    /**\r\n     * @notice Distributes KASH rewards for the current epoch to a specific Staking Pool.\r\n     * @dev Should only be callable by a trusted Keeper.\r\n     * This function will internally transfer KASH to the Staking Pool and call its `depositReward` function.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param epochRewardAmount The KASH amount to distribute for the current epoch.\r\n     */\r\n    function distributeEpochRewardToPool(address stakingPoolAddress, uint256 epochRewardAmount) external;\r\n\r\n    /**\r\n     * @notice Gets the total KASH balance held by this vault.\r\n     * @return The total KASH balance.\r\n     */\r\n    function getVaultBalance() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the reward allocation information for a specific staking pool.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @return A `PoolAllocationData` struct containing allocation details.\r\n     */\r\n    function getPoolAllocationInfo(address stakingPoolAddress) external view returns (PoolAllocationData memory);\r\n\r\n    // --- Admin Functions ---\r\n\r\n    /**\r\n     * @notice Sets the address of the Keeper contract authorized to call `distributeEpochRewardToPool`.\r\n     * @dev Should only be callable by Owner or Admin.\r\n     * @param _keeperAddress The new Keeper address.\r\n     */\r\n    function setKeeperAddress(address _keeperAddress) external;\r\n\r\n    /**\r\n     * @notice Adds or removes a staking pool from the list of pools the vault can interact with.\r\n     * @dev Should only be callable by Owner or Admin.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param isSupported True if the pool should be supported, false otherwise.\r\n     */\r\n    function addSupportedStakingPool(address stakingPoolAddress, bool isSupported) external;\r\n\r\n    /**\r\n     * @notice (Optional) Sets pool-specific reward parameters if the Vault needs to calculate or validate epoch reward amounts.\r\n     * @dev Should only be callable by Owner or Admin.\r\n     * @param stakingPoolAddress The address of the Staking Pool.\r\n     * @param gValue The epoch reward growth rate (e.g., 100 for 1% if using 1e4 precision, or scaled if using 1e18).\r\n     * @param rewardBase The base reward for the first epoch for this pool, in KASH.\r\n     * @param numEpochs The total number of epochs for which this pool will receive rewards.\r\n     * @// Add other parameters as necessary for the reward calculation formula.\r\n     */\r\n    function setPoolRewardParameters(\r\n        address stakingPoolAddress,\r\n        uint256 gValue,\r\n        uint256 rewardBase,\r\n        uint256 numEpochs\r\n        // Potentially other parameters like pool duration if not derived from numEpochs\r\n    ) external;\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>i});var n=t(6540);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);